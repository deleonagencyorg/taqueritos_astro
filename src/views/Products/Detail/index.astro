---
// src/views/Products/Detail/index.astro
import { t } from '../../../i18n/i18n';
import type { Locale } from '../../../i18n/i18n';
import './styles.css';
import { initProductDetail } from './scripts.js';
import LazyImage from '../../../components/common/LazyImage.astro';

// Interfaces locales
interface ProductSize {
  value: string;
  image: string;
}

interface Product {
  id: string;
  name: string;
  image: string;
  available?: string;
  product_image?: string;
  background_image: string;
  background_color: string;
  background_color_2: string;
  sizes: ProductSize[];
  description?: string;
  short_description?: string;
  presentaciones?: Array<{
    value: string;
    icono: string;
  }>;
  // relatedProducts es opcional ya que no existe en la estructura actual
  relatedProducts?: string[];
}

const { currentLang, productId } = Astro.props;

// Obtener datos desde traducciones
const productsAssets = t('home', { namespace: 'products', locale: currentLang }) || {};
const products = t('items', { namespace: 'products', locale: currentLang as Locale }) || [];
const product = products.find((item: Product) => item.id === productId);

// Si el producto no existe, lanzar error
if (!product || Object.keys(product).length === 0) {
  throw new Error(t('errors.product_not_found', { locale: currentLang }));
}

// Asegurar que todas las propiedades necesarias existan
const safeProduct: Product = {
  id: product.id || '',
  name: product.name || '',
  background_color_2: product.background_color_2 || '',
  image: product.image || '',
    background_image: product.background_image || '',
  background_color: product.background_color || '',
  sizes: Array.isArray(product.sizes) ? product.sizes : [],
  available: product.available || ''
};

// Obtener todos los productos como un array
const productsData = t('items', { locale: currentLang, namespace: 'products' }) || [];
const allProductsArray = Array.isArray(productsData) ? productsData : [];

// Filtrar productos relacionados - simplificado para evitar errores
let relatedProducts: any[] = [];
// Solo usar productos de la misma categoría si hay más de 1 producto
if (allProductsArray.length > 1) {
  relatedProducts = allProductsArray
    .filter((p: any) => p.id !== productId)
    .slice(0, 3);
}


---
{currentLang === 'en' && (
  <div id="hero" class="w-full h-80 md:h-[32rem] bg-cover bg-center" style="background-image: url('https://snack.yummiespromociones.com/taqueritos/banner_productos_en.webp'); background-size: cover; background-position: center;"></div>
)}
{safeProduct.background_color && (
  <article id="product-detail" class="product-detail pt-12 md:pt-29 relative min-h-screen flex items-center" 
    style={{
      backgroundImage: `radial-gradient(circle at 50% 50%, ${safeProduct.background_color_2} 0%, ${safeProduct.background_color} 100%)`,
    }}
    transition:animate="slide"
  >
    <div class="md:mt-[0] container mx-auto px-4 py-12 flex flex-col md:flex-row items-center">
      <div class="w-full md:w-1/2 md:mr-auto flex items-center  justify-center py-6">
        <LazyImage
          src={product.product_image}
          alt={product.name}
          class=" h-90 object-cover"
          />
      </div>
      <div class="w-full md:w-1/2 md:ml-auto">
        
        <h1 class="md:text-4xl text-3xl font-bold mb-6 text-white">{safeProduct.name}</h1>
        <h2 class="font-heading md:text-3xl text-2xl text-white">{productsAssets.presentations}</h2>
        {safeProduct.sizes && safeProduct.sizes.length > 0 && (
          <div class="grid grid-cols-3 md:grid-cols-5 gap-2 md:gap-2 my-4">
            {safeProduct.sizes
              .slice() // Crear una copia para no modificar el original
              .sort((a: ProductSize, b: ProductSize) => parseInt(b.value) - parseInt(a.value))
              .map((size: ProductSize) => (
                <div class="flex flex-col items-center">
                  <img 
                    src={size.image} 
                    alt={`Size ${size.value}`}
                    class="w-24"
                  />
                </div>
              ))
            }
          </div>
        )}
        <h2 class="font-heading md:text-2xl text-xl text-white">{productsAssets.product_available}</h2>
        {safeProduct.available && (
          <div class="mb-8 mt-4">
            <img 
              src={safeProduct.available} 
              alt="Available in"
              class="md:h-[35px] h-[35px]"
            />
          </div>
        )}
        <p class="font-medium text-md text-white">{productsAssets.text}</p>

     
      </div>
    </div>
  </article>
)}
<div id="related-products" class="container mx-auto px-4 py-12" transition:animate="fade">
  <h2 class="text-2xl font-bold mb-8 text-white text-center">{productsAssets.related_products}</h2>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    {relatedProducts.slice(0, 2).map((product) => (
      <a 
        href={`/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}/${product.id}`}
        class="block hover:scale-105 transition-transform"
      >
        <div class="aspect-square overflow-hidden w-full h-[400px] flex  items-center justify-center py-2" style={{
      backgroundImage: `radial-gradient(circle at 50% 50%, ${product.background_color_2} 0%, ${product.background_color} 100%)`,
    }}>
          <LazyImage
          src={product.product_image}
          alt={product.name}
          class=" h-80 object-cover"
          />
        </div>
      </a>
    ))}
  </div>
</div>
<script>
  // Este script se ejecuta solo en el navegador
  import { initProductDetail } from './scripts.js';
  document.addEventListener('DOMContentLoaded', () => {
    initProductDetail();
  });
</script>
